generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  passwordHash  String
  name          String
  role          String          @default("USER")
  avatarUrl     String?
  city          String?
  /** EKLENDİ: İlçe ve telefon */
  district      String?
  phone         String?
  bio           String?
  lastSeenAt    DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ChatMessage   ChatMessage[]
  Club          Club?           @relation("ClubModerator")
  Memberships   Membership[]
  Notifications Notification[]
  PaymentIntent PaymentIntent[]
  Subscriptions Subscription[]
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  payload   String
  readAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Club {
  id             String          @id @default(cuid())
  slug           String          @unique
  name           String
  description    String?
  country        String          @default("Türkiye")
  city           String?
  bannerUrl      String?
  priceTRY       Int             @default(49)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  published      Boolean         @default(false)
  moderatorId    String          @unique
  chatRoom       ChatRoom?
  moderator      User            @relation("ClubModerator", fields: [moderatorId], references: [id])
  events         ClubEvent[]
  picks          ClubPick[]
  memberships    Membership[]
  paymentIntents PaymentIntent[]
  subscriptions  Subscription[]
}

model Membership {
  id       String   @id @default(cuid())
  userId   String
  clubId   String
  role     String   @default("MEMBER")
  isActive Boolean  @default(true)
  joinedAt DateTime @default(now())
  club     Club     @relation(fields: [clubId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, clubId])
}

model Subscription {
  id         String    @id @default(cuid())
  userId     String
  clubId     String
  active     Boolean   @default(false)
  startedAt  DateTime?
  canceledAt DateTime?
  club       Club      @relation(fields: [clubId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@unique([userId, clubId])
}

model PaymentIntent {
  id        String   @id @default(cuid())
  userId    String
  clubId    String
  amountTRY Int
  status    String   @default("REQUIRES_PAYMENT")
  createdAt DateTime @default(now())
  club      Club     @relation(fields: [clubId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Book {
  id         String     @id @default(cuid())
  title      String
  author     String
  translator String?
  pages      Int?
  isbn       String?
  coverUrl   String?
  picks      ClubPick[]
}

model ClubPick {
  id        String  @id @default(cuid())
  clubId    String
  bookId    String
  monthKey  String
  isCurrent Boolean @default(false)
  note      String?
  book      Book    @relation(fields: [bookId], references: [id])
  club      Club    @relation(fields: [clubId], references: [id])

  @@unique([clubId, monthKey])
}

model ClubEvent {
  id       String   @id @default(cuid())
  clubId   String
  startsAt DateTime
  title    String   @default("Aylık Oturum")
  notes    String?
  club     Club     @relation(fields: [clubId], references: [id])
}

model ChatRoom {
  id       String        @id @default(cuid())
  clubId   String        @unique
  messages ChatMessage[]
  club     Club          @relation(fields: [clubId], references: [id])
}

model ChatMessage {
  id        String        @id @default(cuid())
  roomId    String
  authorId  String
  body      String
  quotedId  String?
  createdAt DateTime      @default(now())
  author    User          @relation(fields: [authorId], references: [id])
  quoted    ChatMessage?  @relation("Quote", fields: [quotedId], references: [id])
  quotedBy  ChatMessage[] @relation("Quote")
  room      ChatRoom      @relation(fields: [roomId], references: [id])
}
