// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum PostStatus {
  PUBLISHED
  PENDING
  HIDDEN
  REPORTED
}

model User {
  id                     String               @id @default(cuid())
  email                  String               @unique
  passwordHash           String
  name                   String
  username               String?              @unique
  slug                   String?              @unique
  role                   String               @default("USER")
  avatarUrl              String?
  city                   String?
  bannerUrl              String?
  district               String?
  phone                  String?
  bio                    String?
  about                  String?
  website                String?
  location               String?
  lastSeenAt             DateTime?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  ChatMessage            ChatMessage[]
  Club                   Club?                @relation("ClubModerator")
  comments               Comment[]            @relation("UserComments")
  following              Follow[]             @relation("UserFollowing")
  followers              Follow[]             @relation("UserFollowers")
  likes                  Like[]               @relation("UserLikes")
  Memberships            Membership[]
  Notifications          Notification[]
  PaymentIntent          PaymentIntent[]
  posts                  Post[]               @relation("UserPosts")
  Subscriptions          Subscription[]
  dmMessagesAuthored     DmMessage[]          @relation("DmMessageAuthor")
  dmThreadsAsA           DmThread[]           @relation("DmThreadUserA")
  dmThreadsAsB           DmThread[]           @relation("DmThreadUserB")
  dmThreadsRequested     DmThread[]           @relation("DmThreadRequestAuthor")
  PasswordResetTokens    PasswordResetToken[]
  DmThreadReads          DmThreadRead[]
  PostReports            PostReport[]         @relation("UserReports")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  payload   String
  readAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Club {
  id             String          @id @default(cuid())
  slug           String          @unique
  name           String
  description    String?
  country        String          @default("Türkiye")
  city           String?
  bannerUrl      String?
  priceTRY       Int             @default(49)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  published      Boolean         @default(false)
  moderatorId    String          @unique
  chatRooms      ChatRoom[]
  moderator      User            @relation("ClubModerator", fields: [moderatorId], references: [id])
  events         ClubEvent[]
  memberships    Membership[]
  paymentIntents PaymentIntent[]
  subscriptions  Subscription[]

  capacity       Int?
}

model Membership {
  id       String   @id @default(cuid())
  userId   String
  clubId   String
  clubEventId String
  role     String   @default("MEMBER")
  isActive Boolean  @default(true)
  joinedAt DateTime @default(now())
  club     Club     @relation(fields: [clubId], references: [id])
  event    ClubEvent @relation(fields: [clubEventId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, clubEventId])
}

model Subscription {
  id         String    @id @default(cuid())
  userId     String
  clubId     String
  clubEventId String
  active     Boolean   @default(false)
  startedAt  DateTime?
  canceledAt DateTime?
  club       Club      @relation(fields: [clubId], references: [id])
  event      ClubEvent @relation(fields: [clubEventId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@unique([userId, clubEventId])
}

model PaymentIntent {
  id          String   @id @default(cuid())
  userId      String
  clubId      String
  clubEventId String
  amountTRY   Int
  status      String   @default("REQUIRES_PAYMENT")
  createdAt   DateTime @default(now())
  merchantOid String   @unique
  club        Club     @relation(fields: [clubId], references: [id])
  event       ClubEvent @relation(fields: [clubEventId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([createdAt])
}

model ClubEvent {
  id       String   @id @default(cuid())
  clubId   String
  startsAt DateTime
  title    String   @default("Aylık Oturum")
  notes    String?
  priceTRY Int?
  capacity Int?
  bookTitle String?
  bookAuthor String?
  bookTranslator String?
  bookPages Int?
  bookIsbn String?
  bookCoverUrl String?
  club     Club     @relation(fields: [clubId], references: [id])
  memberships Membership[]
  subscriptions Subscription[]
  paymentIntents PaymentIntent[]
  chatRoom ChatRoom?
}

model ChatRoom {
  id          String        @id @default(cuid())
  clubId      String?       @unique
  clubEventId String        @unique
  messages    ChatMessage[]
  club        Club?         @relation(fields: [clubId], references: [id])
  event       ClubEvent     @relation(fields: [clubEventId], references: [id])
}

model ChatMessage {
  id        String        @id @default(cuid())
  roomId    String
  authorId  String
  body      String
  isSecret  Boolean       @default(false)
  quotedId  String?
  createdAt DateTime      @default(now())
  author    User          @relation(fields: [authorId], references: [id])
  quoted    ChatMessage?  @relation("Quote", fields: [quotedId], references: [id])
  quotedBy  ChatMessage[] @relation("Quote")
  room      ChatRoom      @relation(fields: [roomId], references: [id])
}

model Post {
  id          String      @id @default(cuid())
  ownerId     String
  body        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  clientToken String?     @unique
  images      PostImage[]
  comments    Comment[]
  likes       Like[]
  owner       User        @relation("UserPosts", fields: [ownerId], references: [id])
  status      PostStatus  @default(PENDING)
  reports     PostReport[]

  @@index([ownerId, createdAt])
  @@index([status, createdAt])
}

model PostImage {
  id     String @id @default(cuid())
  postId String
  url    String
  width  Int?
  height Int?
  post   Post   @relation(fields: [postId], references: [id])

  @@index([postId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation("UserLikes", fields: [userId], references: [id])

  @@unique([postId, userId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  body      String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation("UserComments", fields: [userId], references: [id])

  @@index([postId])
  @@index([userId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followingId])
  @@index([followerId])
}

model DmThread {
  id             String          @id @default(cuid())
  userAId        String
  userBId        String
  lastMessage    DateTime        @default(now())
  status         DmThreadStatus  @default(ACTIVE)
  requestedById  String?
  requestedAt    DateTime?
  lastDecisionAt DateTime?
  userA          User            @relation("DmThreadUserA", fields: [userAId], references: [id])
  userB          User            @relation("DmThreadUserB", fields: [userBId], references: [id])
  requestedBy    User?           @relation("DmThreadRequestAuthor", fields: [requestedById], references: [id])
  messages       DmMessage[]
  reads          DmThreadRead[]

  @@unique([userAId, userBId])
  @@index([lastMessage])
  @@index([status])
  @@index([requestedById])
}

model DmMessage {
  id        String   @id @default(cuid())
  threadId  String
  authorId  String
  body      String
  createdAt DateTime @default(now())
  thread    DmThread @relation(fields: [threadId], references: [id])
  author    User     @relation("DmMessageAuthor", fields: [authorId], references: [id])

  @@index([threadId, createdAt])
}

model DmThreadRead {
  id         String   @id @default(cuid())
  threadId   String
  userId     String
  lastReadAt DateTime @default(now())
  thread     DmThread @relation(fields: [threadId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([threadId, userId])
  @@index([userId])
  @@index([threadId, lastReadAt])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId, expiresAt])
}

model PostReport {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  reason    String
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation("UserReports", fields: [userId], references: [id])

  @@index([postId, createdAt])
  @@index([userId, createdAt])
}

enum DmThreadStatus {
  ACTIVE
  REQUESTED
  ARCHIVED
}
