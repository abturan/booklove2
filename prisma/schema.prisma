// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String               @id @default(cuid())
  email                  String               @unique
  passwordHash           String
  name                   String
  username               String?              @unique
  slug                   String?              @unique
  role                   String               @default("USER")
  avatarUrl              String?
  city                   String?
  bannerUrl              String?
  district               String?
  phone                  String?
  bio                    String?
  about                  String?
  website                String?
  location               String?
  lastSeenAt             DateTime?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  ChatMessage            ChatMessage[]
  Club                   Club?                @relation("ClubModerator")
  comments               Comment[]            @relation("UserComments")
  sentFriendRequests     FriendRequest[]      @relation("SentRequests")
  receivedFriendRequests FriendRequest[]      @relation("ReceivedRequests")
  likes                  Like[]               @relation("UserLikes")
  Memberships            Membership[]
  Notifications          Notification[]
  PaymentIntent          PaymentIntent[]
  posts                  Post[]               @relation("UserPosts")
  Subscriptions          Subscription[]
  dmMessagesAuthored     DmMessage[]          @relation("DmMessageAuthor")
  dmThreadsAsA           DmThread[]           @relation("DmThreadUserA")
  dmThreadsAsB           DmThread[]           @relation("DmThreadUserB")
  PasswordResetTokens    PasswordResetToken[]
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  payload   String
  readAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Club {
  id             String          @id @default(cuid())
  slug           String          @unique
  name           String
  description    String?
  country        String          @default("Türkiye")
  city           String?
  bannerUrl      String?
  priceTRY       Int             @default(49)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  published      Boolean         @default(false)
  moderatorId    String          @unique
  chatRoom       ChatRoom?
  moderator      User            @relation("ClubModerator", fields: [moderatorId], references: [id])
  events         ClubEvent[]
  picks          ClubPick[]
  memberships    Membership[]
  paymentIntents PaymentIntent[]
  subscriptions  Subscription[]
}

model Membership {
  id       String   @id @default(cuid())
  userId   String
  clubId   String
  role     String   @default("MEMBER")
  isActive Boolean  @default(true)
  joinedAt DateTime @default(now())
  club     Club     @relation(fields: [clubId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, clubId])
}

model Subscription {
  id         String    @id @default(cuid())
  userId     String
  clubId     String
  active     Boolean   @default(false)
  startedAt  DateTime?
  canceledAt DateTime?
  club       Club      @relation(fields: [clubId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@unique([userId, clubId])
}

model PaymentIntent {
  id          String   @id @default(cuid())
  userId      String
  clubId      String
  amountTRY   Int
  status      String   @default("REQUIRES_PAYMENT")
  createdAt   DateTime @default(now())
  merchantOid String   @unique
  club        Club     @relation(fields: [clubId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([createdAt])
}

model Book {
  id         String     @id @default(cuid())
  title      String
  author     String
  translator String?
  pages      Int?
  isbn       String?
  coverUrl   String?
  picks      ClubPick[]
}

model ClubPick {
  id        String  @id @default(cuid())
  clubId    String
  bookId    String
  monthKey  String
  isCurrent Boolean @default(false)
  note      String?
  book      Book    @relation(fields: [bookId], references: [id])
  club      Club    @relation(fields: [clubId], references: [id])

  @@unique([clubId, monthKey])
}

model ClubEvent {
  id       String   @id @default(cuid())
  clubId   String
  startsAt DateTime
  title    String   @default("Aylık Oturum")
  notes    String?
  club     Club     @relation(fields: [clubId], references: [id])
}

model ChatRoom {
  id       String        @id @default(cuid())
  clubId   String        @unique
  messages ChatMessage[]
  club     Club          @relation(fields: [clubId], references: [id])
}

model ChatMessage {
  id        String        @id @default(cuid())
  roomId    String
  authorId  String
  body      String
  quotedId  String?
  createdAt DateTime      @default(now())
  author    User          @relation(fields: [authorId], references: [id])
  quoted    ChatMessage?  @relation("Quote", fields: [quotedId], references: [id])
  quotedBy  ChatMessage[] @relation("Quote")
  room      ChatRoom      @relation(fields: [roomId], references: [id])
}

model Post {
  id          String      @id @default(cuid())
  ownerId     String
  body        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  clientToken String?     @unique
  comments    Comment[]
  likes       Like[]
  owner       User        @relation("UserPosts", fields: [ownerId], references: [id])
  images      PostImage[]

  @@index([ownerId, createdAt])
}

model PostImage {
  id     String @id @default(cuid())
  postId String
  url    String
  width  Int?
  height Int?
  post   Post   @relation(fields: [postId], references: [id])

  @@index([postId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation("UserLikes", fields: [userId], references: [id])

  @@unique([postId, userId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  body      String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation("UserComments", fields: [userId], references: [id])

  @@index([postId])
  @@index([userId])
}

model FriendRequest {
  id          String              @id @default(cuid())
  fromId      String
  toId        String
  status      FriendRequestStatus @default(PENDING)
  createdAt   DateTime            @default(now())
  respondedAt DateTime?
  from        User                @relation("SentRequests", fields: [fromId], references: [id])
  to          User                @relation("ReceivedRequests", fields: [toId], references: [id])

  @@unique([fromId, toId])
  @@index([toId, status])
  @@index([fromId, status])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model DmThread {
  id          String      @id @default(cuid())
  userAId     String
  userBId     String
  lastMessage DateTime    @default(now())
  userA       User        @relation("DmThreadUserA", fields: [userAId], references: [id])
  userB       User        @relation("DmThreadUserB", fields: [userBId], references: [id])
  messages    DmMessage[]

  @@unique([userAId, userBId])
  @@index([lastMessage])
}

model DmMessage {
  id        String   @id @default(cuid())
  threadId  String
  authorId  String
  body      String
  createdAt DateTime @default(now())
  thread    DmThread @relation(fields: [threadId], references: [id])
  author    User     @relation("DmMessageAuthor", fields: [authorId], references: [id])

  @@index([threadId, createdAt])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId, expiresAt])
}
